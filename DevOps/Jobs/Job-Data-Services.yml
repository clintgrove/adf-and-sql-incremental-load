parameters:
  Environment: string
  Location: String
  ServiceConnection: String
  FeatureFlag_SQL_StopIfDataLossCanOccur: boolean
  FeatureFlag_SQL_Deploy: boolean
  RGroup: string

jobs:  
- deployment: JobDataServices
  displayName: Job - Data Services
  pool:
   vmImage: 'windows-2019'
  dependsOn: JobDataBuild
  variables:
    - template: ..\Variables\Variables-Global.yml
    - template: ..\Variables\Variables-${{ Parameters.Environment }}.yml
    - group: ${{ Parameters.Environment }}-vars
  environment: ${{ variables.AdoEnvironment }}
  strategy:
    runOnce:
      preDeploy:
        steps:
        - ${{ if eq(parameters.FeatureFlag_ADF_DeployPipelines, true) }}:
          - download: current
            artifact: 'AdfArmTemplatesData01' #  ADF01 arm templates
        - ${{ if eq(parameters.FeatureFlag_SQL_Deploy, true) }}:
          - download: current
            artifact: 'dropDacpacDATransactions' #  Lida dacpac
          - download: current
            artifact: 'dropDacpacFACSOURCE' #  facSource dacpac
        - download: current
          artifact: 'ArmTemplates' 

        
      deploy:
        steps:

        - task: AzurePowerShell@5
          displayName: Get output from ARM template
          name: SetSqlVarFQDNp2
          inputs:
            script: FilePath
            azureSubscription: '$(ServiceConnection)'
            ScriptPath: '$(Pipeline.Workspace)/Scripts/getDeploymentOutputs.ps1'
            ScriptArguments: '-resourceGroupName ${{variables.ResourceGroupNameGHUB}}'
            azurePowerShellVersion: LatestVersion
            
        - script: echo sqlSrvNameOutput is  with alias  $(SetSqlVarFQDNp2.sqlSrvNameOutput)
        - script: echo ADF Name is $(SetSqlVarFQDNp2.adfNameOutput)
        
        # Deploy Databases
        - ${{ if eq(parameters.FeatureFlag_SQL_Deploy, true) }}:
          # Deploy LIDAMovementTransactions Database
          - template: ../Tasks/Task-DeployAzureSqlDb.yml
            parameters:
              DacpacFilePath: '$(Pipeline.Workspace)/dropDacpacDATransactions/DatabaseLIDA.dacpac'
              DatabaseName: ${{ variables.DADatabaseName }}
              AdditionalArguments: /p:BlockOnPossibleDataLoss=${{ lower(parameters.FeatureFlag_SQL_StopIfDataLossCanOccur) }}
              ServerName: $(SetSqlVarFQDNp2.sqlSrvNameOutput)  #${{ variables.AzureSqlServerName_ghub }}
              ServiceConnection: ${{ parameters.ServiceConnection }}
              RGroup: ${{ parameters.RGroup }}

          #dfac source database
          - template: ../Tasks/Task-DeployAzureSqlDb.yml
            parameters:
              DacpacFilePath: '$(Pipeline.Workspace)/dropDacpacFACSOURCE/dafacstuffuks-source.dacpac'
              DatabaseName: ${{ variables.DatabaseName_facstuff_source }}
              AdditionalArguments: /p:BlockOnPossibleDataLoss=${{ lower(parameters.FeatureFlag_SQL_StopIfDataLossCanOccur) }}
              ServerName: $(SetSqlVarFQDNp2.sqlSrvNameOutput) # ${{ variables.AzureSqlServerName_ghub }}
              ServiceConnection: ${{ parameters.ServiceConnection }}
              RGroup: ${{ parameters.RGroup }}
          
          #dfac target database
          - template: ../Tasks/Task-DeployAzureSqlDb.yml
            parameters:
              DacpacFilePath: '$(Pipeline.Workspace)/dropDacpacFACTARGET/dafacstuffuks-target.dacpac'
              DatabaseName: ${{ variables.DatabaseName_facstuff_target }}
              AdditionalArguments: /p:BlockOnPossibleDataLoss=${{ lower(parameters.FeatureFlag_SQL_StopIfDataLossCanOccur) }}
              ServerName: $(SetSqlVarFQDNp2.sqlSrvNameOutput) #${{ variables.AzureSqlServerName_ghub }}
              ServiceConnection: ${{ parameters.ServiceConnection }}
              RGroup: ${{ parameters.RGroup }}


        # Stop ADF 01 triggers
        - ${{ if eq(parameters.FeatureFlag_ADF_DeployPipelines, true) }}:
          - template: ../Tasks/Utils/Util-StopDataFactoryTriggers.yml
            parameters:
              ServiceConnection: ${{ parameters.ServiceConnection }}
              ResourceGroup: ${{ variables.ResourceGroupNameGHUB }}
              SubscriptionId: ${{ variables.SubscriptionIdGHUB }}
              DataFactoryName: ${{ variables.DataFactoryNameGHUB }}

        #Deploy Data Factory 01 pipelines
          - task: AzureResourceManagerTemplateDeployment@3
            #condition: and(succeed(), eq('${{parameters.doSql}}', 'true')) #this is for the datafactory deployment
            displayName: "Deploy data factory inner stuff"
            inputs:
              deploymentScope: 'Resource Group'
              azureResourceManagerConnection: ${{ parameters.ServiceConnection }}
              subscriptionId: ${{ variables.SubscriptionIdGHUB }} 
              action: 'Create Or Update Resource Group'
              resourceGroupName: ${{ variables.ResourceGroupNameGHUB }}
              location: ${{ parameters.Location }}
              templateLocation: 'Linked artifact'
              csmFile: '$(Pipeline.Workspace)/AdfArmTemplatesData01/ARMTemplateForFactory.json' # From downloaded artifact
              deploymentMode: 'Incremental'
              overrideParameters: '-factoryName $(SetSqlVarFQDNp2.adfNameOutput) -facstuff_DatabaseSOURCE_connectionString "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=$(SetSqlVarFQDNp2.sqlSrvNameOutput);Initial Catalog=dba-fac-stf-source;Server=tcp:$(SetSqlVarFQDNp2.sqlSrvNameOutput),1433;TrustServerCertificate=False" -facstuff_DatabaseTARGET_connectionString "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=$(SetSqlVarFQDNp2.sqlSrvNameOutput);Initial Catalog=dba-facstuff-target;Server=tcp:$(SetSqlVarFQDNp2.sqlSrvNameOutput),1433;TrustServerCertificate=False"'
              outputs: adfNameOutput

            #Start ADF 01 triggers
          - template: ../Tasks/Utils/Util-StartDataFactoryTriggers.yml
            parameters:
              ServiceConnection: ${{ parameters.ServiceConnection }}
              ResourceGroup: ${{ variables.ResourceGroupNameGHUB }}
              SubscriptionId: ${{ variables.SubscriptionIdGHUB }}
              DataFactoryName: ${{ variables.DataFactoryNameGHUB }}
