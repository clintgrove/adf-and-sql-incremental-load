parameters:
  Environment: string
  Location: String
  ServiceConnection: String
  sqlServerPasswordDA: String
  clintazrealsecret: string
  clintazrealappid: string
  FeatureFlag_ADF_DeployPipelines: boolean
  FeatureFlag_SQL_Deploy: boolean

jobs: 
- deployment: JobDataInfrastructure
  pool:
   vmImage: 'windows-2019'
  displayName: Job - Data Infrastructure
  dependsOn: JobGlobalBuild
  variables:
    - template: ..\Variables\Variables-Global.yml
    - template: ..\Variables\Variables-${{ Parameters.Environment }}.yml
    - group: ${{ Parameters.Environment }}-vars
  environment: ${{ variables.AdoEnvironment }}
  strategy:
    runOnce:
      deploy:
        steps:

        # # Create Resouce Groups GHUB
        # - template: ../Tasks/Task-ArmTemplateSubscDeployment.yml
        #   parameters:
        #     ServiceConnection: ${{ parameters.ServiceConnection }}
        #     SubscriptionId: ${{ variables.SubscriptionIdGHUB }}
        #     ResourceGroupName: ${{ variables.ResourceGroupNameGHUB }}
        #     Location: ${{ parameters.Location }}
        #     ServiceReleased: "Azure Resource Groups"
        #     doSql: false
            
        # # Create key vault on GHUB
        # - template: ../Tasks/Task-ArmTemplateDeployment.yml
        #   parameters:
        #     ServiceConnection: ${{ parameters.ServiceConnection }}
        #     SubscriptionId: ${{ variables.SubscriptionIdGHUB }}
        #     ResourceGroupName: ${{ variables.ResourceGroupNameGHUB }}
        #     Location: ${{ parameters.Location }}
        #     TemplateFilePath: '$(Agent.BuildDirectory)/${{ variables.AzureKeyVaultArmTemplate }}' # From global variables
        #     TemplateParamFilePath: '$(Agent.BuildDirectory)/${{ variables.AzureKeyVaultArmTemplateParametersData }}' # From environment specific variables
        #     ServiceReleased: "Azure Key Vault"
        #     doSql: false
        
        # # Create Log Analytics GHUB
        # - template: ../Tasks/Task-ArmTemplateDeployment.yml
        #   parameters:
        #     ServiceConnection: ${{ parameters.ServiceConnection }}
        #     SubscriptionId: ${{ variables.SubscriptionIdGHUB }}
        #     ResourceGroupName: ${{ variables.ResourceGroupNameGHUB }}
        #     Location: ${{ parameters.Location }}
        #     TemplateFilePath: '$(Agent.BuildDirectory)/${{ variables.AzureLogAnalyticsArmTemplate }}' # From global variables
        #     TemplateParamFilePath: '$(Agent.BuildDirectory)/${{ variables.AzureLogAnalyticsParameters }}' # From environment specific variables
        #     ServiceReleased: "Log Analytics"
        #     doSql: false
            
        # Create Azure SQL Server GHUB
        - ${{ if eq(parameters.FeatureFlag_SQL_Deploy, true) }}:
          - template: ../Tasks/Task-ArmTemplateDeployment.yml
            parameters:
              ServiceConnection: ${{ parameters.ServiceConnection }}
              SubscriptionId: ${{ variables.SubscriptionIdGHUB }}
              ResourceGroupName: ${{ variables.ResourceGroupNameGHUB }}
              Location: ${{ parameters.Location }}
              TemplateFilePath: '$(Agent.BuildDirectory)/${{ variables.AzureSqlServer }}' # From global variables
              TemplateParamFilePath: '$(Agent.BuildDirectory)/${{ variables.AzureSqlServerParametersData }}' # From environment specific variables
              ServiceReleased: "AzureSqlServer"
              sqlServerPasswordDA: $(SqlPassword)
              doSql: true

        - task: AzurePowerShell@5
          displayName: Get output from ARM template
          name: SetSqlVarFQDNp2
          inputs:
            script: FilePath
            azureSubscription: '$(ServiceConnection)'
            ScriptPath: '$(Pipeline.Workspace)/Scripts/getDeploymentOutputs.ps1'
            ScriptArguments: '-resourceGroupName ${{variables.ResourceGroupNameGHUB}}'
            azurePowerShellVersion: LatestVersion
            
        - script: echo sqlSrvNameOutput is  $(sqlSrvNameOutput)

        - task: AzurePowerShell@5
          displayName: Get output from ARM template
          name: SetSqlVarFQDNp3
          inputs:
            ScriptType: InlineScript
            azureSubscription: '$(ServiceConnection)'
            inline: |
              $resourceGroupName = 'lz-ghub-test-uks-rg-01' 
              $lastDeployment = Get-AzResourceGroupDeployment -ResourceGroupName 'lz-ghub-test-uks-rg-01' | Sort Timestamp -Descending | Where-Object {$_.DeploymentName -like "AzureSQL*"} | Select -First 1

              if(!$lastDeployment) {
                  throw "Deployment could not be found for Resource Group '$resourceGroupName'."
              }

              if(!$lastDeployment.Outputs) {
                  throw "No output parameters could be found for the last deployment of Resource Group '$resourceGroupName'."
              }

              foreach ($key in $lastDeployment.Outputs.Keys){
                  $type = $lastDeployment.Outputs.$key.Type
                  $value = $lastDeployment.Outputs.$key.Value

                  if ($type -eq "SecureString") {
                      Write-Host "##vso[task.setvariable variable=$key;issecret=true]$value" 
                  }
                  else {
                      if ($key -eq "armOutput") {
                          Write-Host "##vso[task.setvariable variable=sqlSrvNameOutput3;isOutput=true]$value"
                      }

                  }
              }
            azurePowerShellVersion: LatestVersion
        
        - script: echo sqlSrvNameOutput3 is  $(sqlSrvNameOutput3) or $(SetSqlVarFQDNp3.sqlSrvNameOutput3) or even $(SetSqlVarFQDNp3.armOutput) or with quotes $'(SetSqlVarFQDNp3.sqlSrvNameOutput3)''
        
        # Create Data Factory (as LZ can have INT, DATA and SHARED, this can be seen in the last bit of each variable name such as SubscriptionIdData)
        - ${{ if eq(parameters.FeatureFlag_ADF_DeployPipelines, true) }}:
          - template: ../Tasks/Task-ArmTemplateDeployment.yml
            parameters:
              ServiceConnection: ${{ parameters.ServiceConnection }}
              SubscriptionId: ${{ variables.SubscriptionIdGHUB }}
              ResourceGroupName: ${{ variables.ResourceGroupNameGHUB }}
              Location: ${{ parameters.Location }}
              TemplateFilePath: '$(Agent.BuildDirectory)/${{ variables.AzureDataFactoryArmTemplate }}' # From global variables
              TemplateParamFilePath: '$(Agent.BuildDirectory)/${{ variables.AzureDataFactoryParametersData }}' # From environment specific variables
              ServiceReleased: "Azure Data Factory"
              doSql: false
              Environment:  ${{ parameters.Environment }}  